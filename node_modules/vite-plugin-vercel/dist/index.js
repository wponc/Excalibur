// src/index.ts
import fs4 from "fs/promises";

// src/utils.ts
import { normalizePath } from "vite";
import path from "path";
function getRoot(config) {
  return normalizePath(config.root || process.cwd());
}
function getOutput(config, suffix) {
  var _a, _b;
  return path.join(
    ((_a = config.vercel) == null ? void 0 : _a.outDir) ? "" : getRoot(config),
    ((_b = config.vercel) == null ? void 0 : _b.outDir) ?? ".vercel/output",
    suffix ?? ""
  );
}
function getPublic(config) {
  return path.join(getRoot(config), config.publicDir || "public");
}
function pathRelativeTo(filePath, config, rel) {
  const root = getRoot(config);
  return normalizePath(
    path.relative(normalizePath(path.join(root, rel)), filePath)
  );
}

// src/config.ts
import path2 from "path";

// src/schemas/config/config.ts
import { z } from "zod";
var HasOrMissing = z.array(
  z.union([
    z.object({
      type: z.literal("host"),
      value: z.string()
    }).strict(),
    z.object({
      type: z.literal("header"),
      key: z.string(),
      value: z.string().optional()
    }).strict(),
    z.object({
      type: z.literal("cookie"),
      key: z.string(),
      value: z.string().optional()
    }).strict(),
    z.object({
      type: z.literal("query"),
      key: z.string(),
      value: z.string().optional()
    }).strict()
  ])
).optional();
var vercelOutputConfigSchema = z.object({
  version: z.literal(3),
  routes: z.array(
    z.union([
      z.object({
        src: z.string(),
        dest: z.string().optional(),
        headers: z.record(z.string()).optional(),
        methods: z.array(z.string()).optional(),
        status: z.number().int().positive().optional(),
        continue: z.boolean().optional(),
        check: z.boolean().optional(),
        missing: HasOrMissing,
        has: HasOrMissing,
        locale: z.object({
          redirect: z.record(z.string()).optional(),
          cookie: z.string().optional()
        }).strict().optional(),
        middlewarePath: z.string().optional()
      }).strict(),
      z.object({
        handle: z.union([
          z.literal("rewrite"),
          z.literal("filesystem"),
          z.literal("resource"),
          z.literal("miss"),
          z.literal("hit"),
          z.literal("error")
        ]),
        src: z.string().optional(),
        dest: z.string().optional(),
        status: z.number().optional()
      }).strict()
    ])
  ).optional(),
  images: z.object({
    sizes: z.tuple([
      z.number().int().positive(),
      z.number().int().positive()
    ]),
    domains: z.array(z.string()).nonempty().optional(),
    minimumCacheTTL: z.number().int().positive().optional(),
    formats: z.union([z.literal("image/avif"), z.literal("image/webp")]).array().nonempty().optional(),
    dangerouslyAllowSVG: z.boolean().optional(),
    contentSecurityPolicy: z.string().optional()
  }).strict().optional(),
  wildcard: z.array(
    z.object({
      domain: z.string(),
      value: z.string()
    }).strict()
  ).optional(),
  overrides: z.record(
    z.object({
      path: z.string().optional(),
      contentType: z.string().optional()
    }).strict()
  ).optional(),
  cache: z.array(z.string()).optional()
}).strict();

// src/config.ts
import fs from "fs/promises";
import { getTransformedRoutes } from "@vercel/routing-utils";
function reorderEnforce(arr) {
  return [
    ...arr.filter((r) => r.enforce === "pre"),
    ...arr.filter((r) => !r.enforce),
    ...arr.filter((r) => r.enforce === "post")
  ];
}
function getConfig(resolvedConfig, rewrites, overrides) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
  const _rewrites = [
    // User provided config always comes first
    ...((_a = resolvedConfig.vercel) == null ? void 0 : _a.rewrites) ?? [],
    ...rewrites ?? []
  ];
  const { routes, error } = getTransformedRoutes({
    cleanUrls: ((_b = resolvedConfig.vercel) == null ? void 0 : _b.cleanUrls) ?? true,
    trailingSlash: (_c = resolvedConfig.vercel) == null ? void 0 : _c.trailingSlash,
    rewrites: reorderEnforce(_rewrites),
    redirects: ((_d = resolvedConfig.vercel) == null ? void 0 : _d.redirects) ? reorderEnforce((_e = resolvedConfig.vercel) == null ? void 0 : _e.redirects) : void 0
  });
  if (error) {
    throw error;
  }
  if (((_g = (_f = resolvedConfig.vercel) == null ? void 0 : _f.config) == null ? void 0 : _g.routes) && resolvedConfig.vercel.config.routes.length > 0) {
    console.warn(
      "It is discouraged to use `vercel.config.routes` to override routes. Prefer using `vercel.rewrites` and `vercel.redirects`."
    );
  }
  return vercelOutputConfigSchema.parse({
    version: 3,
    ...(_h = resolvedConfig.vercel) == null ? void 0 : _h.config,
    routes: [
      ...routes ?? [],
      ...((_j = (_i = resolvedConfig.vercel) == null ? void 0 : _i.config) == null ? void 0 : _j.routes) ?? []
    ],
    overrides: {
      ...(_l = (_k = resolvedConfig.vercel) == null ? void 0 : _k.config) == null ? void 0 : _l.overrides,
      ...overrides
    }
  });
}
function getConfigDestination(resolvedConfig) {
  return path2.join(getOutput(resolvedConfig), "config.json");
}
async function writeConfig(resolvedConfig, rewrites, overrides) {
  await fs.writeFile(
    getConfigDestination(resolvedConfig),
    JSON.stringify(
      getConfig(resolvedConfig, rewrites, overrides),
      void 0,
      2
    ),
    "utf-8"
  );
}

// src/build.ts
import glob from "fast-glob";
import path3 from "path";
import { build } from "esbuild";

// src/assert.ts
import { newError } from "@brillout/libassert";
var libName = "vite-plugin-vercel";
function assert(condition, errorMessage) {
  if (condition) {
    return;
  }
  const err = newError(`[${libName}][Wrong Usage] ${errorMessage}`, 2);
  throw err;
}

// src/schemas/config/vc-config.ts
import { z as z2 } from "zod";
var vercelOutputEdgeVcConfigSchema = z2.object({
  runtime: z2.literal("edge"),
  entrypoint: z2.string(),
  envVarsInUse: z2.array(z2.string()).optional()
}).strict();
var vercelOutputServerlessVcConfigSchema = z2.object({
  runtime: z2.string(),
  handler: z2.string(),
  memory: z2.number().int().min(128).max(3008).optional(),
  maxDuration: z2.number().int().positive().optional(),
  environment: z2.record(z2.string()).optional(),
  regions: z2.array(z2.string()).optional()
}).strict();
var vercelOutputServerlessNodeVcConfigSchema = vercelOutputServerlessVcConfigSchema.extend({
  launcherType: z2.literal("Nodejs"),
  shouldAddHelpers: z2.boolean().optional(),
  shouldAddSourcemapSupport: z2.boolean().optional(),
  awsLambdaHandler: z2.string().optional()
}).strict();
var vercelOutputVcConfigSchema = z2.union([
  vercelOutputEdgeVcConfigSchema,
  vercelOutputServerlessVcConfigSchema,
  vercelOutputServerlessNodeVcConfigSchema
]);

// src/build.ts
import fs2 from "fs/promises";
function getAdditionalEndpoints(resolvedConfig) {
  var _a;
  return (((_a = resolvedConfig.vercel) == null ? void 0 : _a.additionalEndpoints) ?? []).map((e) => ({
    ...e,
    addRoute: e.addRoute ?? true,
    // path.resolve removes the trailing slash if any
    destination: path3.posix.resolve("/", e.destination) + ".func"
  }));
}
function getEntries(resolvedConfig) {
  const apiEntries = glob.sync(`${getRoot(resolvedConfig)}/api/**/*.*([a-zA-Z0-9])`).filter((filepath) => !path3.basename(filepath).startsWith("_"));
  if (apiEntries.length > 0) {
    console.warn(
      "@vercel/build is currently force building /api files itself, with no way to disable it. In order to avoid double compilation, you should temporarily rename /api to /_api while using this plugin. /_api functions are compiled under .vercel/output/functions/api/*.func as if they were in /api."
    );
  }
  const otherApiEntries = glob.sync(`${getRoot(resolvedConfig)}/_api/**/*.*([a-zA-Z0-9])`).filter((filepath) => !path3.basename(filepath).startsWith("_"));
  return [...apiEntries, ...otherApiEntries].reduce((entryPoints, filePath) => {
    const outFilePath = pathRelativeTo(
      filePath,
      resolvedConfig,
      filePath.includes("/_api/") ? "_api" : "api"
    );
    const parsed = path3.posix.parse(outFilePath);
    entryPoints.push({
      source: filePath,
      destination: `api/${path3.posix.join(parsed.dir, parsed.name)}.func`,
      addRoute: true
    });
    return entryPoints;
  }, getAdditionalEndpoints(resolvedConfig));
}
var standardBuildOptions = {
  bundle: true,
  target: "es2020",
  format: "cjs",
  platform: "node",
  logLevel: "info",
  minify: true
};
async function buildFn(resolvedConfig, entry, buildOptions) {
  assert(
    entry.destination.length > 0,
    `Endpoint ${typeof entry.source === "string" ? entry.source : "-"} does not have build destination`
  );
  const outfile = path3.join(
    getOutput(resolvedConfig, "functions"),
    entry.destination,
    "index.js"
  );
  const options = Object.assign({}, standardBuildOptions, { outfile });
  if (buildOptions) {
    Object.assign(options, buildOptions);
  }
  if (!options.stdin) {
    if (typeof entry.source === "string") {
      options.entryPoints = [entry.source];
    } else {
      assert(
        typeof entry.source === "object",
        `\`{ source }\` must be a string or an object`
      );
      assert(
        typeof entry.source.contents === "string",
        `\`{ contents }\` must be a string`
      );
      options.stdin = entry.source;
    }
  }
  if (entry.edge) {
    options.conditions = [
      "edge-light",
      "browser",
      "module",
      "import",
      "require"
    ];
  }
  await build(options);
  await writeVcConfig(resolvedConfig, entry.destination, Boolean(entry.edge));
}
async function writeVcConfig(resolvedConfig, destination, edge) {
  var _a;
  const vcConfig = path3.join(
    getOutput(resolvedConfig, "functions"),
    destination,
    ".vc-config.json"
  );
  await fs2.writeFile(
    vcConfig,
    JSON.stringify(
      vercelOutputVcConfigSchema.parse(
        edge ? {
          runtime: "edge",
          entrypoint: "index.js"
        } : {
          runtime: "nodejs16.x",
          handler: "index.js",
          maxDuration: (_a = resolvedConfig.vercel) == null ? void 0 : _a.defaultMaxDuration,
          launcherType: "Nodejs",
          shouldAddHelpers: true
        }
      ),
      void 0,
      2
    ),
    "utf-8"
  );
}
function getSourceAndDestination(destination) {
  if (destination.startsWith("api/")) {
    return path3.posix.resolve("/", destination);
  }
  return path3.posix.resolve("/", destination, ":match*");
}
async function buildEndpoints(resolvedConfig) {
  const entries = getEntries(resolvedConfig);
  for (const entry of entries) {
    await buildFn(resolvedConfig, entry);
  }
  return entries.filter((e) => e.addRoute !== false).map((e) => e.destination.replace(/\.func$/, "")).map((destination) => ({
    source: getSourceAndDestination(destination),
    destination: getSourceAndDestination(destination)
  }));
}

// src/prerender.ts
import path4 from "path";

// src/schemas/config/prerender-config.ts
import { z as z3 } from "zod";
var vercelOutputPrerenderConfigSchema = z3.object({
  expiration: z3.union([z3.number().int().positive(), z3.literal(false)]),
  group: z3.number().int().optional(),
  bypassToken: z3.string().optional(),
  fallback: z3.string().optional(),
  allowQuery: z3.array(z3.string()).optional()
}).strict();

// src/prerender.ts
import fs3 from "fs/promises";
function execPrerender(resolvedConfig) {
  var _a;
  const prerender = (_a = resolvedConfig.vercel) == null ? void 0 : _a.prerender;
  if (prerender === false) {
    return;
  }
  return prerender == null ? void 0 : prerender(resolvedConfig);
}
var group = 1;
async function writePrerenderConfig(resolvedConfig, destination, isr) {
  const parsed = path4.parse(destination);
  const outfile = path4.join(
    getOutput(resolvedConfig, "functions"),
    parsed.dir,
    parsed.name + ".prerender-config.json"
  );
  await fs3.mkdir(
    path4.join(getOutput(resolvedConfig, "functions"), parsed.dir),
    { recursive: true }
  );
  await fs3.writeFile(
    outfile,
    JSON.stringify(
      vercelOutputPrerenderConfigSchema.parse({
        group: group++,
        ...isr
      }),
      void 0,
      2
    ),
    "utf-8"
  );
}
function getPrerenderSymlinkInfo(resolvedConfig, destination, target) {
  const parsed = path4.parse(destination);
  const targetParsed = path4.parse(target);
  return {
    target: path4.join(
      getOutput(resolvedConfig, "functions"),
      targetParsed.dir,
      targetParsed.name + ".func"
    ),
    link: path4.join(
      getOutput(resolvedConfig, "functions"),
      parsed.dir,
      parsed.name + ".func"
    )
  };
}
async function buildPrerenderConfigs(resolvedConfig) {
  const isr = await getIsrConfig(resolvedConfig);
  const entries = Object.entries(isr);
  const rewrites = [];
  for (const [destination, { symlink, route, ...isr2 }] of entries) {
    await writePrerenderConfig(resolvedConfig, destination, isr2);
    if (symlink) {
      const info = getPrerenderSymlinkInfo(
        resolvedConfig,
        destination,
        symlink
      );
      await copyDir(info.target, info.link);
    }
    if (route) {
      rewrites.push({
        source: `(${route})`,
        destination: `${destination}/?__original_path=$1`
      });
    }
  }
  return rewrites;
}
async function copyDir(src, dest) {
  await fs3.mkdir(dest, { recursive: true });
  const entries = await fs3.readdir(src, { withFileTypes: true });
  for (const entry of entries) {
    const srcPath = path4.join(src, entry.name);
    const destPath = path4.join(dest, entry.name);
    entry.isDirectory() ? await copyDir(srcPath, destPath) : await fs3.copyFile(srcPath, destPath);
  }
}
async function getIsrConfig(resolvedConfig) {
  var _a;
  const isr = ((_a = resolvedConfig.vercel) == null ? void 0 : _a.isr) ?? {};
  if (typeof isr === "function") {
    return await isr();
  }
  return isr;
}

// src/index.ts
import path5 from "path";
function vercelPlugin() {
  let resolvedConfig;
  let vpsFound = false;
  return {
    apply: "build",
    name: "vite-plugin-vercel",
    enforce: "post",
    configResolved(config) {
      resolvedConfig = config;
      vpsFound = resolvedConfig.plugins.some(
        (p) => p.name.startsWith("vite-plugin-ssr:")
      );
    },
    async writeBundle() {
      var _a;
      if (!((_a = resolvedConfig.build) == null ? void 0 : _a.ssr)) {
        await cleanOutputDirectory(resolvedConfig);
        if (vpsFound) {
          return;
        }
      }
      const overrides = await execPrerender(resolvedConfig);
      const userOverrides = await computeStaticHtmlOverrides(resolvedConfig);
      const rewrites = await buildEndpoints(resolvedConfig);
      rewrites.push(...await buildPrerenderConfigs(resolvedConfig));
      await writeConfig(resolvedConfig, rewrites, {
        ...userOverrides,
        ...overrides
      });
    }
  };
}
async function cleanOutputDirectory(resolvedConfig) {
  await fs4.rm(getOutput(resolvedConfig), {
    recursive: true,
    force: true
  });
}
async function computeStaticHtmlOverrides(resolvedConfig) {
  const staticAbsolutePath = getOutput(resolvedConfig, "static");
  const files = await getStaticHtmlFiles(staticAbsolutePath);
  const publicDir = getPublic(resolvedConfig);
  const publicFiles = await getStaticHtmlFiles(publicDir);
  files.push(
    ...publicFiles.map((f) => f.replace(publicDir, staticAbsolutePath))
  );
  return files.reduce((acc, curr) => {
    const relPath = path5.relative(staticAbsolutePath, curr);
    const parsed = path5.parse(relPath);
    const pathJoined = path5.join(parsed.dir, parsed.name);
    acc[relPath] = {
      path: pathJoined
    };
    return acc;
  }, {});
}
async function getStaticHtmlFiles(src) {
  try {
    await fs4.stat(src);
  } catch (e) {
    return [];
  }
  const entries = await fs4.readdir(src, { withFileTypes: true });
  const htmlFiles = [];
  for (const entry of entries) {
    const srcPath = path5.join(src, entry.name);
    entry.isDirectory() ? htmlFiles.push(...await getStaticHtmlFiles(srcPath)) : srcPath.endsWith(".html") ? htmlFiles.push(srcPath) : void 0;
  }
  return htmlFiles;
}
function allPlugins() {
  return [vercelPlugin()];
}
export {
  allPlugins as default
};
